# Generated by Django 2.0.2 on 2018-02-28 15:26

import crowdsrc.src.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authtoken', '0002_auto_20160226_1747'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('target__username', 'created'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='CrowdRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('responded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_rejected', models.BooleanField(default=False)),
                ('is_viewed', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_crowd_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_crowd_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('bio', models.TextField(blank=True, default='')),
                ('location', models.CharField(blank=True, default='Unknown', max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, default='C:\\Users\\Ben\\Desktop\\crowdsrc\\backend\\media\\user_images\\default.png', upload_to=crowdsrc.src.models.profile_image_upload_to)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('website', models.CharField(blank=True, max_length=2083)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('created', 'title', 'id'),
            },
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='crowdsrc.Category')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='crowdsrc.Project')),
            ],
        ),
        migrations.CreateModel(
            name='RefreshableExpiringToken',
            fields=[
                ('token_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authtoken.Token')),
                ('refresh_token', models.CharField(max_length=255, unique=True)),
                ('refresh_expires', models.DateTimeField(blank=True, default=crowdsrc.src.models.refresh_token_expire, editable=False)),
            ],
            bases=('authtoken.token',),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='SubmissionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=crowdsrc.src.models.submission_upload_to)),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('reviewer', models.ForeignKey(on_delete=None, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionSkillReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='crowdsrc.SubmissionReview')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='crowdsrc.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('status_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='crowdsrc.Project')),
            ],
            options={
                'ordering': ('title', '-last_updated', '-created'),
            },
        ),
        migrations.CreateModel(
            name='TaskSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='crowdsrc.Skill')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='crowdsrc.Task')),
            ],
            options={
                'ordering': ('skill__name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('is_accepted', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='crowdsrc.Task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='crowdsrc.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TeamMessageReply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False)),
                ('last_updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='crowdsrc.TeamMessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_replies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivacySettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_email_search', models.BooleanField(default=True)),
                ('allow_loc_search', models.BooleanField(default=True)),
                ('allow_name_search', models.BooleanField(default=True)),
                ('allow_username_search', models.BooleanField(default=True)),
                ('allow_search_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('view_activity_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('view_age_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('view_email_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('view_crowd_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('view_stats_level', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_preferred', models.BooleanField(default=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='crowdsrc.Skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('skill__name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='UserTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_users', to='crowdsrc.Task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_tasks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='userprivacysettings',
            name='settings',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='privacy', to='crowdsrc.UserSettings'),
        ),
        migrations.AddField(
            model_name='userpreferences',
            name='settings',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='crowdsrc.UserSettings'),
        ),
        migrations.AddField(
            model_name='submissionreview',
            name='submission',
            field=models.ForeignKey(on_delete=None, related_name='reviews', to='crowdsrc.TaskSubmission'),
        ),
        migrations.AddField(
            model_name='submissionfile',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='crowdsrc.TaskSubmission'),
        ),
        migrations.AlterUniqueTogether(
            name='usertask',
            unique_together={('task', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('user', 'skill')},
        ),
        migrations.AlterUniqueTogether(
            name='tasksubmission',
            unique_together={('task', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='taskskill',
            unique_together={('task', 'skill')},
        ),
        migrations.AlterUniqueTogether(
            name='submissionskillreview',
            unique_together={('review', 'skill')},
        ),
        migrations.AlterUniqueTogether(
            name='submissionreview',
            unique_together={('submission', 'reviewer')},
        ),
        migrations.AlterUniqueTogether(
            name='projectcategory',
            unique_together={('project', 'category')},
        ),
        migrations.AlterUniqueTogether(
            name='crowdrequest',
            unique_together={('sender', 'receiver'), ('receiver', 'sender')},
        ),
        migrations.AlterUniqueTogether(
            name='blockeduser',
            unique_together={('source', 'target')},
        ),
    ]
